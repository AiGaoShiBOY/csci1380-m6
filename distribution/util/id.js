/* eslint-disable */

/*
ATTENTION: This is an obfuscated file. You do not need to understand it.
Do NOT edit this file directly. Use it as a black box.

If you notice any issues with using this file, please contact the TAs.
*/
const _0x4fe023 = _0x3490;
(function (_0x1d15a6, _0x1bd136) {
    const _0x1cbb0e = _0x3490, _0x114855 = _0x1d15a6();
    while (!![]) {
        try {
            const _0x205014 = parseInt(_0x1cbb0e(0x161)) / 0x1 * (-parseInt(_0x1cbb0e(0x154)) / 0x2) + -parseInt(_0x1cbb0e(0x167)) / 0x3 + -parseInt(_0x1cbb0e(0x160)) / 0x4 + parseInt(_0x1cbb0e(0x164)) / 0x5 * (parseInt(_0x1cbb0e(0x165)) / 0x6) + -parseInt(_0x1cbb0e(0x170)) / 0x7 * (-parseInt(_0x1cbb0e(0x15a)) / 0x8) + -parseInt(_0x1cbb0e(0x15d)) / 0x9 + parseInt(_0x1cbb0e(0x15c)) / 0xa * (parseInt(_0x1cbb0e(0x16a)) / 0xb);
            if (_0x205014 === _0x1bd136)
                break;
            else
                _0x114855['push'](_0x114855['shift']());
        } catch (_0x74cb17) {
            _0x114855['push'](_0x114855['shift']());
        }
    }
}(_0x2f77, 0x793e5));
function _0x2f77() {
    const _0xd08188 = [
        'hqgwa',
        'digest',
        'hex',
        'gZPdj',
        '35304TsdjGI',
        'hash',
        '2870BDUoCT',
        '1584270wfzhkB',
        'JsvCc',
        'idToNum:\x20id\x20is\x20not\x20in\x20KID\x20form!',
        '443756fjLrUx',
        '21lMSBRs',
        'nzaWR',
        'uCTdT',
        '5cPIVwB',
        '9996SndsXs',
        'substring',
        '2060622YHCwtS',
        'ALoel',
        'xGYwC',
        '66671eYqNss',
        'sort',
        'port',
        'fOlix',
        'createHash',
        'aLLCx',
        '427EGZHfp',
        'aFgib',
        '51420ExSRhK',
        'exports'
    ];
    _0x2f77 = function () {
        return _0xd08188;
    };
    return _0x2f77();
}
const assert = require('assert');
function _0x3490(_0x52356d, _0x2683b1) {
    const _0x2f77ed = _0x2f77();
    return _0x3490 = function (_0x3490be, _0x354423) {
        _0x3490be = _0x3490be - 0x153;
        let _0x40b232 = _0x2f77ed[_0x3490be];
        return _0x40b232;
    }, _0x3490(_0x52356d, _0x2683b1);
}
var crypto = require('crypto');
function getID(_0x312bf3) {
    const _0x3717c8 = _0x3490, _0x513b87 = {
            'fOlix': 'sha256',
            'AFiLU': _0x3717c8(0x158)
        }, _0x328c97 = crypto[_0x3717c8(0x16e)](_0x513b87[_0x3717c8(0x16d)]);
    return _0x328c97['update'](JSON['stringify'](_0x312bf3)), _0x328c97[_0x3717c8(0x157)](_0x513b87['AFiLU']);
}
function getNID(_0x4d29e8) {
    const _0x5db5be = _0x3490, _0x1cc91a = {
            'gZPdj': function (_0x273229, _0xde1d1b) {
                return _0x273229(_0xde1d1b);
            }
        };
    return _0x4d29e8 = {
        'ip': _0x4d29e8['ip'],
        'port': _0x4d29e8[_0x5db5be(0x16c)]
    }, _0x1cc91a[_0x5db5be(0x159)](getID, _0x4d29e8);
}
function getSID(_0xdbb1bb) {
    const _0x2c826a = _0x3490;
    return getNID(_0xdbb1bb)[_0x2c826a(0x166)](0x0, 0x5);
}
function idToNum(_0x4430b0) {
    const _0x50dbae = _0x3490, _0x412cd2 = {
            'hqgwa': function (_0x2c03bc, _0x4e9c76, _0x12d158) {
                return _0x2c03bc(_0x4e9c76, _0x12d158);
            },
            'xGYwC': function (_0x552535, _0x49d712) {
                return _0x552535(_0x49d712);
            },
            'uCTdT': _0x50dbae(0x15f)
        };
    let _0x7974a1 = _0x412cd2['hqgwa'](parseInt, _0x4430b0, 0x10);
    return _0x412cd2[_0x50dbae(0x156)](assert, !_0x412cd2[_0x50dbae(0x169)](isNaN, _0x7974a1), _0x412cd2[_0x50dbae(0x163)]), _0x7974a1;
}
function naiveHash(_0x5d412b, _0x2e3216) {
    const _0x38ba9e = _0x3490, _0x415882 = {
            'aLLCx': function (_0x3a5172, _0x3d9bdb) {
                return _0x3a5172(_0x3d9bdb);
            }
        };
    return _0x2e3216[_0x38ba9e(0x16b)](), _0x2e3216[_0x415882[_0x38ba9e(0x16f)](idToNum, _0x5d412b) % _0x2e3216['length']];
}
function consistentHash(_0x497b2d, _0x1c0c55) {
    const _0x1b6bd9 = _0x3490, _0x1a009f = idToNum(_0x497b2d), _0x5d05bc = _0x1c0c55['map'](_0x570124 => ({
            'id': _0x570124,
            'hash': idToNum(_0x570124)
        }));
    _0x5d05bc[_0x1b6bd9(0x16b)]((_0x30cf64, _0x12caa6) => _0x30cf64['hash'] - _0x12caa6[_0x1b6bd9(0x15b)]);
    for (let _0x434e0a of _0x5d05bc) {
        if (_0x1a009f <= _0x434e0a[_0x1b6bd9(0x15b)])
            return _0x434e0a['id'];
    }
    return _0x5d05bc[0x0]['id'];
}
function rendezvousHash(_0x23f811, _0x1212a5) {
    const _0x270ddd = _0x3490, _0x308078 = {
            'aFgib': function (_0x43a0d7, _0x5ebf94) {
                return _0x43a0d7(_0x5ebf94);
            },
            'ALoel': function (_0x495dba, _0x2d9403) {
                return _0x495dba + _0x2d9403;
            },
            'JsvCc': function (_0xc03005, _0x398ffb) {
                return _0xc03005(_0x398ffb);
            },
            'nzaWR': function (_0x20d7cf, _0x262fa7) {
                return _0x20d7cf > _0x262fa7;
            }
        };
    let _0x254720 = 0x0, _0x5c13c3 = null;
    for (let _0x1e20e9 of _0x1212a5) {
        let _0x4ec085 = _0x308078[_0x270ddd(0x153)](getID, _0x308078[_0x270ddd(0x168)](_0x23f811, _0x1e20e9)), _0x185aa8 = _0x308078[_0x270ddd(0x15e)](idToNum, _0x4ec085);
        _0x308078[_0x270ddd(0x162)](_0x185aa8, _0x254720) && (_0x254720 = _0x185aa8, _0x5c13c3 = _0x1e20e9);
    }
    return _0x5c13c3;
}
module[_0x4fe023(0x155)] = {
    'getNID': getNID,
    'getSID': getSID,
    'getID': getID,
    'idToNum': idToNum,
    'naiveHash': naiveHash,
    'consistentHash': consistentHash,
    'rendezvousHash': rendezvousHash
};/* eslint-enable */
